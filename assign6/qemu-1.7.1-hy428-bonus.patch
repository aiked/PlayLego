diff -u -r qemu-1.7.1/exec.c qemu-1.7.1.mod/exec.c
--- qemu-1.7.1/exec.c	2014-03-25 14:01:10.000000000 +0000
+++ qemu-1.7.1.mod/exec.c	2014-05-20 19:14:12.887492268 +0000
@@ -51,8 +51,28 @@
 
 #include "exec/memory-internal.h"
 
+
 //#define DEBUG_SUBPAGE
 
+/* HY428 Counters */
+#define HY428
+
+#ifdef HY428
+#include "hy428.h"
+
+uint64_t ReadBytes	= 0;
+uint64_t WriteBytes	= 0;
+uint64_t ReadAccess	= 0;
+uint64_t WriteAccess	= 0;
+uint64_t WA_ReadBytes	= 0;
+uint64_t WA_WriteBytes	= 0;
+uint64_t WA_ReadAccess	= 0;
+uint64_t WA_WriteAccess = 0;
+uint64_t PageFaultNo    = 0;
+uint64_t WA_PageFaultNo = 0;
+
+#endif /* HY428 */
+
 #if !defined(CONFIG_USER_ONLY)
 static int in_migration;
 
@@ -1910,6 +1930,10 @@
                 ptr = qemu_get_ram_ptr(addr1);
                 memcpy(ptr, buf, l);
                 invalidate_and_set_dirty(addr1, l);
+#ifdef HY428
+		hy428_increase_write_bytes(l);
+		hy428_increase_write_access();
+#endif /* HY428 */
             }
         } else {
             if (!memory_access_is_direct(mr, is_write)) {
@@ -1943,6 +1967,10 @@
                 /* RAM case */
                 ptr = qemu_get_ram_ptr(mr->ram_addr + addr1);
                 memcpy(buf, ptr, l);
+#ifdef HY428
+		hy428_increase_read_bytes(l);
+		hy428_increase_read_access();
+#endif /* HY428 */
             }
         }
         len -= l;
@@ -2612,3 +2640,54 @@
     }
 }
 #endif
+
+
+#ifdef HY428
+
+void
+hy428_increase_read_bytes(uint64_t bytes)
+{
+	if(ReadBytes >= (UINT64_MAX - 50)){
+		ReadBytes = 0;
+		WA_ReadBytes += 1;
+	}
+	else
+		ReadBytes += bytes;	
+}
+
+void
+hy428_increase_write_bytes(uint64_t bytes)
+{
+	if(WriteBytes >= (UINT64_MAX - 50)){
+		WriteBytes = 0;
+		WA_WriteBytes += 1;
+	}
+	else
+		WriteBytes += bytes;
+}
+
+
+void
+hy428_increase_read_access(void)
+{
+	if(ReadAccess == UINT64_MAX){
+		ReadAccess = 0;
+		WA_ReadAccess += 1;
+	}
+	else
+		ReadAccess += 1;
+}
+
+
+void
+hy428_increase_write_access(void)
+{
+	if(WriteAccess == UINT64_MAX){
+		WriteAccess = 0;
+		WA_WriteAccess += 1;
+	}
+	else
+		WriteAccess += 1;
+}
+
+#endif /* HY428 */
diff -u -r qemu-1.7.1/target-i386/mem_helper.c qemu-1.7.1.mod/target-i386/mem_helper.c
--- qemu-1.7.1/target-i386/mem_helper.c	2014-03-25 14:01:10.000000000 +0000
+++ qemu-1.7.1.mod/target-i386/mem_helper.c	2014-05-20 19:43:31.090860209 +0000
@@ -20,6 +20,16 @@
 #include "cpu.h"
 #include "helper.h"
 
+/* HY428 Counters */
+#define HY428
+
+#ifdef HY428
+#include "hy428.h"
+
+//uint64_t PageFaultNo	= 0;
+//uint64_t WA_PageFaultNo	= 0;
+#endif /* HY428 */
+
 #if !defined(CONFIG_USER_ONLY)
 #include "exec/softmmu_exec.h"
 #endif /* !defined(CONFIG_USER_ONLY) */
@@ -139,6 +149,9 @@
 
     ret = cpu_x86_handle_mmu_fault(env, addr, is_write, mmu_idx);
     if (ret) {
+#ifdef HY428
+        hy428_increase_page_fault();
+#endif /* HY428 */
         if (retaddr) {
             /* now we have a real cpu fault */
             cpu_restore_state(env, retaddr);
@@ -147,3 +160,18 @@
     }
 }
 #endif
+
+#ifdef HY428
+
+void
+hy428_increase_page_fault(void)
+{
+	if(PageFaultNo == UINT_MAX){
+		PageFaultNo = 0;
+		WA_PageFaultNo += 1;
+	}
+	else
+		PageFaultNo++;
+}
+
+#endif /* HY428 */
diff -u -r qemu-1.7.1/vl.c qemu-1.7.1.mod/vl.c
--- qemu-1.7.1/vl.c	2014-03-25 14:01:10.000000000 +0000
+++ qemu-1.7.1.mod/vl.c	2014-05-20 18:57:38.100806019 +0000
@@ -174,6 +174,12 @@
 //#define DEBUG_NET
 //#define DEBUG_SLIRP
 
+#define HY428
+
+#ifdef HY428
+#include "hy428.h"
+#endif /* HY428 */
+
 #define DEFAULT_RAM_SIZE 128
 
 #define MAX_VIRTIO_CONSOLES 1
@@ -2017,6 +2023,10 @@
         dev_time += profile_getclock() - ti;
 #endif
     } while (!main_loop_should_exit());
+
+#ifdef HY428
+	hy428_exit_request();
+#endif /* HY428 */
 }
 
 static void version(void)
@@ -4379,3 +4389,23 @@
 
     return 0;
 }
+
+#ifdef HY428
+void
+hy428_exit_request(void)
+{
+	printf("\n---------- STATS ----------\n");
+	printf("Read Bytes:\t");
+	printf("%" PRIu64 "\n", ReadBytes + (WA_ReadBytes * UINT64_MAX));
+	printf("Write Bytes:\t");
+	printf("%" PRIu64 "\n", WriteBytes + (WA_WriteBytes * UINT64_MAX));
+	printf("Read Accesses:\t");
+	printf("%" PRIu64 "\n", ReadAccess + (WA_ReadAccess * UINT64_MAX));
+	printf("Write Accesses:\t");
+	printf("%" PRIu64 "\n", WriteAccess + (WA_ReadAccess * UINT64_MAX));
+	printf("Page Faults :\t");
+	printf("%" PRIu64 "\n", PageFaultNo + (WA_PageFaultNo * UINT64_MAX));
+	printf("---------------------------\n");
+}
+#endif /* HY428 */
+
--- /dev/null	2014-05-19 20:58:34.763326507 +0000
+++ qemu-1.7.1.mod/hy428.h	2014-05-20 19:12:29.230823561 +0000
@@ -0,0 +1,53 @@
+/* Counters */
+extern uint64_t ReadBytes;
+extern uint64_t WriteBytes;
+extern uint64_t ReadAccess;
+extern uint64_t WriteAccess;
+extern uint64_t WA_ReadBytes;
+extern uint64_t WA_WriteBytes;
+extern uint64_t WA_ReadAccess;
+extern uint64_t WA_WriteAccess;
+extern uint64_t	PageFaultNo;
+extern uint64_t WA_PageFaultNo;
+
+/*
+ * Exit handler
+ * Print stats
+ */
+void
+hy428_exit_request(void);
+
+
+/*
+ * Increases the ReadBytes counter
+ */
+void
+hy428_increase_read_bytes(uint64_t);
+
+
+/*
+ * Increases the WriteBytes counter
+ */
+void
+hy428_increase_write_bytes(uint64_t);
+
+
+/*
+ * Increases the ReadAccess counter
+ */
+void
+hy428_increase_read_access(void);
+
+
+/*
+ * Increases the WriteAccess counter
+ */
+void
+hy428_increase_write_access(void);
+
+
+/*
+ * Increases the Page Fault counter
+ */
+void
+hy428_increase_page_fault(void);
